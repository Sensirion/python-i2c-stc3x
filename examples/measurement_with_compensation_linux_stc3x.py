#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2024 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.38.1
# Product:       stc3x
# Model-Version: 1.0.0
#

import argparse
import time
from sensirion_i2c_driver import LinuxI2cTransceiver, I2cConnection, CrcCalculator
from sensirion_driver_adapters.i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_stc3x.device import Stc3xDevice

parser = argparse.ArgumentParser()
parser.add_argument('--i2c-port', '-p', default='/dev/i2c-1')
args = parser.parse_args()

with LinuxI2cTransceiver(args.i2c_port) as i2c_transceiver:
    channel = I2cChannel(I2cConnection(i2c_transceiver),
                         slave_address=0x29,
                         crc=CrcCalculator(8, 0x31, 0xff, 0x0))
    sensor = Stc3xDevice(channel)
    time.sleep(0.014)

    #     Output the product identifier and serial number
    (product_id, serial_number
     ) = sensor.get_product_id()
    print(f"Product id = {product_id}"
          )
    print(f"Serial Number = {serial_number}"
          )

    #     Measure STC31-C CO2 in air in range 0% - 40%
    #     or STC31 CO2 in air in range 0% - 25%
    sensor.set_binary_gas(19)

    #     TODO: Setup SHT4x sensor
    for i in range(100):

        #     Slow down the sampling to 1Hz
        time.sleep(1.0)

        #     Read humidity and temperature from external SHT4x sensor and use
        #     it for compensation.
        #     TODO: read SHT4x sensor and use values for compensation
        sensor.set_relative_humidity(50.0)
        sensor.set_temperature(50.0)
        (co2_concentration, temperature
         ) = sensor.measure_gas_concentration()

        #     Print CO2 concentration in Vol% and temperature in degree celsius.
        print(f"CO2 concentration = {co2_concentration}"
              )
        print(f"Temperature = {temperature}"
              )
